
import java.sql.*;
import java.awt.Color;
import java.awt.Component;
import java.util.ArrayList;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.RowFilter;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Can
 */
public class NotForm extends javax.swing.JFrame {

    DefaultTableModel model;

    /**
     * Creates new form NotForm
     */
    public NotForm() {
        initComponents();
        DbHelper.getInstance().openConnection();

        getTable();
        getNewRenderedTable(notTable);
        DbHelper.getInstance().closeConnection();

    }

    private static JTable getNewRenderedTable(final JTable table) {
        table.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
            @Override
            public Component getTableCellRendererComponent(JTable table,
                    Object value, boolean isSelected, boolean hasFocus, int row, int col) {
                super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, col);

                String status = (String) table.getModel().getValueAt(row, 5);

                Color kaldinColor = new Color(255, 77, 77);
                Color gectinColor = new Color(159, 255, 128);

                if ("FF".equals(status)) {
                    setBackground(kaldinColor);
                    // setForeground(Color.WHITE);
                } else {
                    setBackground(gectinColor);
                    //setForeground(table.getForeground());
                }
                return this;
            }
        });
        return table;
    }

    public void getTable() {
        model = (DefaultTableModel) notTable.getModel();
        model.setRowCount(0);
        ArrayList<Notlar> notlarim = DbHelper.getInstance().tumNotlariGetir();
        for (Notlar n : notlarim) {
            Object[] row = {
                n.getId(),
                n.getDersAdi(),
                n.getVizeNotu(),
                n.getFinalNotu(),
                n.getOrtalama(),
                n.getHarfNotu(),
                n.getDurum()
            };
            model.addRow(row);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        txtSearch = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtFinalNotu = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtDersAdi = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        txtVizeNotu = new javax.swing.JTextField();
        btnEkle = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        notTable = new javax.swing.JTable();
        topluSil = new javax.swing.JButton();
        btnGuncelle = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        tumunuSil = new javax.swing.JButton();
        lblMessage = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 204));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        txtSearch.setFont(new java.awt.Font("Dubai Light", 0, 14)); // NOI18N
        txtSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchActionPerformed(evt);
            }
        });
        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchKeyReleased(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Dubai Light", 1, 16)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 0, 51));
        jLabel5.setText("Final Notu");

        txtFinalNotu.setFont(new java.awt.Font("Dubai Light", 0, 14)); // NOI18N
        txtFinalNotu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFinalNotuActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Dubai Light", 1, 16)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 0, 51));
        jLabel4.setText("Vize Notu");

        txtDersAdi.setFont(new java.awt.Font("Dubai Light", 0, 14)); // NOI18N
        txtDersAdi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDersAdiActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Dubai Light", 1, 16)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 51, 51));
        jLabel3.setText("Ders Adı");

        jLabel2.setFont(new java.awt.Font("Dubai Light", 1, 16)); // NOI18N
        jLabel2.setText("Arama");

        txtVizeNotu.setFont(new java.awt.Font("Dubai Light", 0, 14)); // NOI18N
        txtVizeNotu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtVizeNotuActionPerformed(evt);
            }
        });

        btnEkle.setBackground(new java.awt.Color(102, 255, 51));
        btnEkle.setFont(new java.awt.Font("Lucida Sans", 0, 14)); // NOI18N
        btnEkle.setText("EKLE");
        btnEkle.setBorder(null);
        btnEkle.setBorderPainted(false);
        btnEkle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEkleActionPerformed(evt);
            }
        });

        jScrollPane1.setBackground(new java.awt.Color(255, 255, 255));

        notTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Ders No", "Ders Adı", "Vize Notu", "Final Notu", "Ortalama", "Harf Notu ", "Durum"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Double.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        notTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                notTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(notTable);
        if (notTable.getColumnModel().getColumnCount() > 0) {
            notTable.getColumnModel().getColumn(0).setResizable(false);
            notTable.getColumnModel().getColumn(1).setResizable(false);
            notTable.getColumnModel().getColumn(2).setResizable(false);
            notTable.getColumnModel().getColumn(3).setResizable(false);
            notTable.getColumnModel().getColumn(4).setResizable(false);
            notTable.getColumnModel().getColumn(5).setResizable(false);
            notTable.getColumnModel().getColumn(6).setResizable(false);
        }

        topluSil.setBackground(new java.awt.Color(255, 26, 26));
        topluSil.setFont(new java.awt.Font("Lucida Sans", 0, 14)); // NOI18N
        topluSil.setText("SIL");
        topluSil.setBorderPainted(false);
        topluSil.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                topluSilActionPerformed(evt);
            }
        });

        btnGuncelle.setBackground(new java.awt.Color(0, 152, 255));
        btnGuncelle.setFont(new java.awt.Font("Lucida Sans", 0, 14)); // NOI18N
        btnGuncelle.setText("GÜNCELLE");
        btnGuncelle.setBorderPainted(false);
        btnGuncelle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuncelleActionPerformed(evt);
            }
        });

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/uni.jpg"))); // NOI18N

        tumunuSil.setBackground(new java.awt.Color(204, 0, 0));
        tumunuSil.setFont(new java.awt.Font("Lucida Sans", 0, 14)); // NOI18N
        tumunuSil.setForeground(new java.awt.Color(255, 255, 255));
        tumunuSil.setText("TÜMÜNÜ SIL");
        tumunuSil.setBorderPainted(false);
        tumunuSil.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tumunuSilActionPerformed(evt);
            }
        });

        lblMessage.setFont(new java.awt.Font("Segoe UI Semibold", 0, 16)); // NOI18N
        lblMessage.setForeground(new java.awt.Color(153, 0, 204));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtVizeNotu, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtDersAdi, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(47, 47, 47)
                                .addComponent(jLabel1))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(btnEkle, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtFinalNotu, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addComponent(btnGuncelle, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(topluSil, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(tumunuSil, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 778, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(24, 24, 24))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lblMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 631, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtDersAdi, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtVizeNotu, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtFinalNotu, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnEkle, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnGuncelle, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 559, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(topluSil, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tumunuSil, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                .addComponent(lblMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtVizeNotuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtVizeNotuActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtVizeNotuActionPerformed

    private void txtDersAdiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDersAdiActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDersAdiActionPerformed

    private void txtFinalNotuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFinalNotuActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFinalNotuActionPerformed

    private void txtSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchActionPerformed

    private void btnEkleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEkleActionPerformed

        DbHelper.getInstance().openConnection();
        PreparedStatement pStatement;
        int satirSayisi = model.getRowCount();
        System.out.println(satirSayisi);

        if (txtDersAdi.getText().isEmpty() || txtVizeNotu.getText().isEmpty() || txtFinalNotu.getText().isEmpty()) {

            lblMessage.setText("ALAN BOŞ BIRAKILAMAZ!!");

        } else {

            String girilenDersAdi = txtDersAdi.getText();
            int girilenVizeNotu = Integer.valueOf(txtVizeNotu.getText());
            int girilenFinalNotu = Integer.valueOf(txtFinalNotu.getText());
            double ortalamaNotu = ((girilenVizeNotu * 0.4) + (girilenFinalNotu * 0.6));
            String durumMesaji = "";
            String harfNotu = "";

            boolean max = (((0 <= girilenVizeNotu) && (girilenVizeNotu <= 100)) && ((0 <= girilenFinalNotu) && (girilenFinalNotu <= 100)));

            if (max) {
                if (girilenFinalNotu >= 50) {
                    if (ortalamaNotu < 45.5) {
                        harfNotu = "FF";
                        durumMesaji = "Kaldın";
                    } else if (ortalamaNotu >= 45.5 && ortalamaNotu < 60) {
                        harfNotu = "DD";
                        durumMesaji = "Geçtin";

                    } else if (ortalamaNotu >= 60 && ortalamaNotu < 65) {
                        harfNotu = "CC";
                        durumMesaji = "Geçtin";

                    } else if (ortalamaNotu >= 65 && ortalamaNotu < 70) {
                        harfNotu = "CB";
                        durumMesaji = "Geçtin";
                    } else if (ortalamaNotu >= 70 && ortalamaNotu < 80) {
                        harfNotu = "BB";
                        durumMesaji = "Geçtin";
                    } else if (ortalamaNotu >= 80 && ortalamaNotu < 90) {
                        harfNotu = "BA";
                        durumMesaji = "Geçtin";
                    } else if (ortalamaNotu >= 90 && ortalamaNotu < 100) {
                        harfNotu = "AA";
                        durumMesaji = "Geçtin";
                    }

                } else {
                    harfNotu = "FF";
                    durumMesaji = "Kaldın";
                }

                try {
                    String sorgu = "INSERT INTO " + DbHelper.TABLO_ADI + "(id,DersAdi,VizeNotu,FinalNotu,Ortalama,HarfNotu,Durum) VALUES(?,?,?,?,?,?,?)";
                    int yeniSatirSayisi = satirSayisi + 1;
                    pStatement = DbHelper.getInstance().openConnection().prepareStatement(sorgu);
                    pStatement.setInt(1, yeniSatirSayisi);
                    pStatement.setString(2, girilenDersAdi);
                    pStatement.setInt(3, girilenVizeNotu);
                    pStatement.setInt(4, girilenFinalNotu);
                    pStatement.setDouble(5, ortalamaNotu);
                    pStatement.setString(6, harfNotu);
                    pStatement.setString(7, durumMesaji);
                    pStatement.executeUpdate();

                    getTable();
                    lblMessage.setText("NOT BAŞARIYLA EKLENDİ!!");

                } catch (Exception e) {
                    e.printStackTrace();
                } finally {
                    txtDersAdi.setText("");
                    txtVizeNotu.setText("");
                    txtFinalNotu.setText("");
                    DbHelper.getInstance().closeConnection();

                }

            } else {
                lblMessage.setText("");
                lblMessage.setText("VİZE VE FİNAL NOTUNU MAKSİMUM 100 GİRİNİZ!!");
                txtVizeNotu.setText("");
                txtFinalNotu.setText("");
            }

        }

    }//GEN-LAST:event_btnEkleActionPerformed

    private void btnGuncelleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuncelleActionPerformed
        DbHelper.getInstance().openConnection();
        int secilenSatir = model.getRowCount();
        PreparedStatement pStatement;

        if (txtDersAdi.getText().isEmpty() || txtVizeNotu.getText().isEmpty() || txtFinalNotu.getText().isEmpty()) {

            lblMessage.setText("ALAN BOŞ BIRAKILAMAZ!!");

        } else {
            String girilenDersAdi = txtDersAdi.getText();
            int girilenVizeNotu = Integer.valueOf(txtVizeNotu.getText());
            int girilenFinalNotu = Integer.valueOf(txtFinalNotu.getText());

            boolean max = (((0 <= girilenVizeNotu) && (girilenVizeNotu <= 100)) && ((0 <= girilenFinalNotu) && (girilenFinalNotu <= 100)));
            if (max) {

                double ortalamaNotu = ((girilenVizeNotu * 0.4) + (girilenFinalNotu * 0.6));
                String durumMesaji = "";
                String harfNotu = "";

                if (girilenFinalNotu >= 50) {
                    if (ortalamaNotu < 45.5) {
                        harfNotu = "FF";
                        durumMesaji = "Kaldın";
                    } else if (ortalamaNotu >= 45.5 && ortalamaNotu < 60) {
                        harfNotu = "DD";
                        durumMesaji = "Geçtin";

                    } else if (ortalamaNotu >= 60 && ortalamaNotu < 65) {
                        harfNotu = "CC";
                        durumMesaji = "Geçtin";

                    } else if (ortalamaNotu >= 65 && ortalamaNotu < 70) {
                        harfNotu = "CB";
                        durumMesaji = "Geçtin";
                    } else if (ortalamaNotu >= 70 && ortalamaNotu < 80) {
                        harfNotu = "BB";
                        durumMesaji = "Geçtin";
                    } else if (ortalamaNotu >= 80 && ortalamaNotu < 90) {
                        harfNotu = "BA";
                        durumMesaji = "Geçtin";
                    } else if (ortalamaNotu >= 90 && ortalamaNotu < 100) {
                        harfNotu = "AA";
                        durumMesaji = "Geçtin";
                    }

                } else {
                    harfNotu = "FF";
                    durumMesaji = "Kaldın";
                    setBackground(Color.red);
                }

                try {
                    String sorgu = "UPDATE " + DbHelper.TABLO_ADI + " SET DersAdi=?,VizeNotu=?,FinalNotu=?,Ortalama=?,HarfNotu=?,Durum=? WHERE id=" + secilenSatir + "";
                    pStatement = DbHelper.getInstance().openConnection().prepareStatement(sorgu);
                    pStatement.setString(1, girilenDersAdi);
                    pStatement.setInt(2, girilenVizeNotu);
                    pStatement.setInt(3, girilenFinalNotu);
                    pStatement.setDouble(4, ortalamaNotu);
                    pStatement.setString(5, harfNotu);
                    pStatement.setString(6, durumMesaji);

                    pStatement.executeUpdate();
                    getTable();
                    lblMessage.setText("NOT BAŞARIYLA GÜNCELLENDİ!!");
                } catch (Exception e) {
                    e.printStackTrace();
                } finally {
                    DbHelper.getInstance().closeConnection();
                }
            } else {
                lblMessage.setText("");
                lblMessage.setText("VİZE VE FİNAL NOTUNU MAKSİMUM 100 GİRİNİZ!!");
                txtVizeNotu.setText("");
                txtFinalNotu.setText("");

            }
        }

    }//GEN-LAST:event_btnGuncelleActionPerformed

    private void notTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_notTableMouseClicked


    }//GEN-LAST:event_notTableMouseClicked

    private void topluSilActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_topluSilActionPerformed
        DbHelper.getInstance().openConnection();
        PreparedStatement pStatement;

        int row = notTable.getSelectedRow();

        if (row == -1) {
            if (model.getRowCount() == 0) {
                lblMessage.setText("EKLENMİŞ NOT YOK!!");
            } else {
                lblMessage.setText("SİLİNECEK NOT SEÇİLMEDİ!!");
            }
        } else {
            int id = (int) model.getValueAt(row, 0);
            try {
                String sorgu = "DELETE FROM " + DbHelper.TABLO_ADI + " WHERE id=?";
                pStatement = DbHelper.getInstance().openConnection().prepareStatement(sorgu);
                pStatement.setInt(1, id);
                pStatement.executeUpdate();
                getTable();
                lblMessage.setText("");
                lblMessage.setText("NOT BAŞARIYLA SİLİNDİ!!");

            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }

    }//GEN-LAST:event_topluSilActionPerformed

    private void txtSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyReleased
        String searchKey = txtSearch.getText();
        TableRowSorter<DefaultTableModel> tableRowSorter = new TableRowSorter<DefaultTableModel>(model);
        notTable.setRowSorter(tableRowSorter);
        tableRowSorter.setRowFilter(RowFilter.regexFilter(searchKey));

    }//GEN-LAST:event_txtSearchKeyReleased

    private void tumunuSilActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tumunuSilActionPerformed
        DbHelper.getInstance().openConnection();
        Statement statement;
        Connection connection;

        int dialogButton = JOptionPane.YES_NO_OPTION;
        ImageIcon icon = new ImageIcon("src/danger.png");
        int jpane = JOptionPane.showConfirmDialog(null, "Emin misiniz?", "Uyarı", dialogButton, JOptionPane.QUESTION_MESSAGE, icon);
        if (jpane == JOptionPane.YES_OPTION) {
            try {
                String sorgu = "DELETE FROM " + DbHelper.TABLO_ADI;
                statement = DbHelper.getInstance().openConnection().createStatement();
                statement.executeUpdate(sorgu);
                getTable();
                lblMessage.setText("");
                lblMessage.setText("TÜM NOTLAR BAŞARIYLA SİLİNDİ!!");
            } catch (SQLException e) {
                e.printStackTrace();
            }
        } else if (jpane == JOptionPane.NO_OPTION) {
            lblMessage.setText("");
            lblMessage.setText("İŞLEM BAŞARISIZ OLDU!!");

        }


    }//GEN-LAST:event_tumunuSilActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NotForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NotForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NotForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NotForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NotForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnEkle;
    private javax.swing.JButton btnGuncelle;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lblMessage;
    private javax.swing.JTable notTable;
    private javax.swing.JButton topluSil;
    private javax.swing.JButton tumunuSil;
    private javax.swing.JTextField txtDersAdi;
    private javax.swing.JTextField txtFinalNotu;
    private javax.swing.JTextField txtSearch;
    private javax.swing.JTextField txtVizeNotu;
    // End of variables declaration//GEN-END:variables
}
